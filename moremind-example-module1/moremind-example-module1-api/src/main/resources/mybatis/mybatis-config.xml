<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <properties>

    </properties>

    <settings>
        <!--    used print sql debug log    -->
        <!-- <setting name="logImpl" value="STDOUT_LOGGING" />-->
        <!-- Enables automatic mapping from classic database column names A_COLUMN to camel case classic Java property names aColumn. -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- Globally enables or disables any caches configured in any mapper under this configuration. default:true -->
        <setting name="cacheEnabled" value="true"/>
        <!-- Globally enables or disables lazy loading. When enabled, all relations will be lazily loaded. This value can be superseded for a specific relation by using the fetchType attribute on it. -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- Allows or disallows multiple ResultSets to be returned from a single statement (compatible driver required). -->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!-- Uses the column label instead of the column name. Different drivers behave differently in this respect. Refer to the driver documentation, or test out both modes to determine how your driver behaves. -->
        <setting name="useColumnLabel" value="true"/>
        <!-- Allows JDBC support for generated keys. A compatible driver is required. This setting forces generated keys to be used if set to true, as some drivers deny compatibility but still work (e.g. Derby). default:false -->
        <setting name="useGeneratedKeys" value="false"/>
        <!-- Configures the default executor. SIMPLE executor does nothing special. REUSE executor reuses prepared statements. BATCH executor reuses statements and batches updates. default:SIMPLE -->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!-- Sets the number of seconds the driver will wait for a response from the database. -->
        <setting name="defaultStatementTimeout" value="25000"/>
    </settings>

    <typeAliases>
        <typeAlias alias="Integer" type="java.lang.Integer"/>
        <typeAlias alias="Long" type="java.lang.Long"/>
        <typeAlias alias="HashMap" type="java.util.HashMap"/>
        <typeAlias alias="LinkedHashMap" type="java.util.LinkedHashMap"/>
        <typeAlias alias="ArrayList" type="java.util.ArrayList"/>
        <typeAlias alias="LinkedList" type="java.util.LinkedList"/>
    </typeAliases>

    <!-- page plugin -->
<!--    <plugins>-->
<!--        <plugin interceptor="com.github.pagehelper.PageInterceptor">-->
<!--            &lt;!&ndash; Support dialect Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL &ndash;&gt;-->
<!--            <property name="dialect" value="com.github.pagehelper.PageHelper"/>-->
<!--            &lt;!&ndash; This parameter defaults to false &ndash;&gt;-->
<!--            &lt;!&ndash; Set to true When the RowBounds First parameter offset regard as pageNum Page number usage &ndash;&gt;-->
<!--            &lt;!&ndash; and startPage Medium pageNum The effect is the same &ndash;&gt;-->
<!--            <property name="offsetAsPageNum" value="true"/>-->
<!--            &lt;!&ndash; This parameter defaults to false &ndash;&gt;-->
<!--            &lt;!&ndash; Set to true Use the RowBounds Paging will occur count query &ndash;&gt;-->
<!--            <property name="rowBoundsWithCount" value="true"/>-->
<!--            &lt;!&ndash; Set to true If pageSize=0 perhaps RowBounds.limit = 0 All the results will be found &ndash;&gt;-->
<!--            &lt;!&ndash; (This is equivalent to that no paging query is executed, but the return result is still Page Type) &ndash;&gt;-->
<!--            <property name="pageSizeZero" value="true"/>-->
<!--            &lt;!&ndash; 3.3.0 Version available - Paging parameter rationalization, default false Disable &ndash;&gt;-->
<!--            &lt;!&ndash; When rationalization is enabled, if pageNum<1 The first page will be queried if pageNum>pages The last page will be queried &ndash;&gt;-->
<!--            &lt;!&ndash; When rationalization is disabled, if pageNum<1 or pageNum>pages Null data will be returned &ndash;&gt;-->
<!--            <property name="reasonable" value="false"/>-->
<!--            &lt;!&ndash; 3.5.0 Version available - To support startPage(Object params)method &ndash;&gt;-->
<!--            &lt;!&ndash; Added one`params`Parameter to configure the parameter mapping from the Map or ServletRequest Medium value &ndash;&gt;-->
<!--            &lt;!&ndash; Can be configured pageNum,pageSize,count,pageSizeZero,reasonable,The default value is used if the mapping is not configured &ndash;&gt;-->
<!--            &lt;!&ndash; Do not copy the configuration without understanding the meaning &ndash;&gt;-->
<!--            <property name="params" value="pageNum=start;pageSize=limit;"/>-->
<!--            &lt;!&ndash; Whether interface parameters are supported to pass paging parameters. The default is false &ndash;&gt;-->
<!--            <property name="supportMethodsArguments" value="true"/>-->
<!--            &lt;!&ndash; Always always return PageInfo type, check check the return type is a PageInfo, none returned Page &ndash;&gt;-->
<!--            <property name="returnPageInfo" value="check"/>-->
<!--        </plugin>-->
<!--    </plugins>-->
</configuration>
